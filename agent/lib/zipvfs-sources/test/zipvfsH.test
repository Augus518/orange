
# This file contains test cases for zipvfs. Specifically, test cases focusing
# on OOM and IO error handling when zipvfs is running in WAL mode.
#

source [file join [file dirname [info script]] zipvfs_common.tcl]
source $testdir/lock_common.tcl
set ::testprefix zipvfsH
db close

if {[uses_8_3_names]} {
  set wal1 "test.wal"
  set wal2 "test2.wal"
} else {
  set wal1 "test.db-wal"
  set wal2 "test2.db-wal"
}

proc do_zip_faultsim_test {args} {
  catch { zip_unregister }
  uplevel do_faultsim_test $args [list -install {
    zip_register "" 1
  } -uninstall {
    catch { db close }
    zip_unregister
  }]
  zip_register "" 1
}

proc do_noop_faultsim_test {args} {
  catch { noop_unregister }
  uplevel do_faultsim_test $args [list -install {
    noop_register "" 1
  } -uninstall {
    catch { db close }
    noop_unregister
  }]
}

do_zip_faultsim_test zipvfsH-1 -prep {
  catch {db close}
  forcedelete test.db $::wal1
  sqlite3 db test.db -vfs zip
} -body {
  execsql { 
    PRAGMA zipvfs_journal_mode = WAL;
    CREATE TABLE t1(x, y);
    CREATE INDEX i1 ON t1(x, y);
    BEGIN;
      INSERT INTO t1 VALUES(1, 2);
      INSERT INTO t1 VALUES(randomblob(800), randomblob(1000));
      INSERT INTO t1 VALUES(randomblob(801), randomblob(1001));
      INSERT INTO t1 VALUES(randomblob(802), randomblob(1002));
      INSERT INTO t1 VALUES(randomblob(803), randomblob(1003));
    COMMIT;
  }
} -test {
  faultsim_test_result {0 wal}
  faultsim_integrity_check
}

catch {db close}
catch {dbFrom close}
forcedelete test.db
forcedelete test.db2
sqlite3 dbFrom test.db2 -vfs zip

do_execsql_test -db dbFrom 2.0 {
  CREATE TABLE t1(a, b, c);
  CREATE INDEX t1a ON t1(a);
  CREATE INDEX t1b ON t1(b);
  WITH s(i) AS (
    SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<200
  )
  INSERT INTO t1 SELECT randomblob(10), randomblob(20), randomblob(500) FROM s;
}

dbFrom close

do_zip_faultsim_test zipvfsH-2 -prep {
  catch {db close}
  catch {dbFrom close}
  forcedelete test.db 
  sqlite3 db test.db -vfs zip
  sqlite3 dbFrom test.db2 -vfs zip
} -body {
  zip_control db main replace dbFrom
} -test {
  faultsim_test_result {0 {}} {1 {disk I/O error}}
  faultsim_integrity_check
  catch {db close}
  catch {dbFrom close}
}
  
catch { dbFrom close }
catch { db close }

zip_unregister
finish_test
