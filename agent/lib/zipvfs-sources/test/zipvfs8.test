
# Tests for the zipvfs module.
#
# The tests in this file test that the 52 bytes stored starting at offset
# 40 of page 1 of the users database are duplicated in the same location
# in the zipvfs database.
#


set testdir $env(SQLITE_TEST_DIR)
source $testdir/tester.tcl
set ::testprefix zipvfs8

db close
zip_register "" 0

# Argument $filename is the name of a zipvfs database file that uses VFS
# "zip". This proc compares the 52 byte block in the header of the zipvfs
# database file with the same block in the uncompressed version of page 1
# stored in the the zipvfs file. If they do not match, an error is raised.
# Otherwise, an empty string is returned.
#
proc check_constraint {filename} {

  set fd [open $filename]
  fconfigure $fd -encoding binary -translation binary
  seek $fd 40
  set zipvfs_header [read $fd 52]

  seek $fd 201
  binary scan [read $fd 8] IuIu offset nbyte
  set nbyte [expr ($nbyte>>15)]

  seek $fd [expr $offset+6]
  set pg1 [zip_unzip [read $fd $nbyte]]
  set user_header [string range $pg1 40 91]
  close $fd

  if {$zipvfs_header != $user_header} { error "data mismatch" }

  return ""
}

do_test 1.1 {
  sqlite3 db test.db -vfs zip
  execsql { CREATE TABLE k1(x) }
  check_constraint test.db
} {}

do_test 1.2 {
  execsql { PRAGMA user_version = 55 }
  check_constraint test.db
} {}

do_test 1.3 {
  execsql { 
    INSERT INTO k1 VALUES(randomblob(800));
    INSERT INTO k1 SELECT randomblob(800) FROM k1;
    INSERT INTO k1 SELECT randomblob(800) FROM k1;
    INSERT INTO k1 SELECT randomblob(800) FROM k1;
    INSERT INTO k1 SELECT randomblob(800) FROM k1;
  }
  check_constraint test.db
} {}
db close

zip_unregister
finish_test
