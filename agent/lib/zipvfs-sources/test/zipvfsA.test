
#
# This file contains test cases for zipvfs. More specifically, it contains
# tests related to bug [4e1c4b7a30] - the problem wherein it was not always
# possible to determine the size of the free space left in the file at byte 
# offset PENDING_BYTE, making it difficult to read large files reliably.
#
# Before the bug was fixed, the size of the PENDING_BYTE gap was determined 
# by the sector-size (VFS xSectorSize() method) of file-system that the
# file was stored in when writing. And the expected sector-size when reading 
# the file was also based on the FS sector size.
#

source [file join [file dirname [info script]] zipvfs_common.tcl]
set ::testprefix zipvfsA
catch { db close }

if {[uses_8_3_names]} {
  puts -nonewline "SQLite compiled with SQLITE_ENABLE_8_3_NAMES=2. "
  puts "Skipping tests ${testprefix}-*."
  finish_test
  return
}


# Create many VFS wrappers, each with a different sector-size. The VFS
# wrappers are named "ss_NNN", where NNN is the reported sector-size.
#
set vfs_wrappers [list]
for {set ss 512} {$ss <= 65536} {set ss [expr $ss*2]} {
  set wrapper "ss.$ss"
  testvfs $wrapper
  $wrapper sectorsize $ss
  lappend vfs_wrappers $wrapper
}

# Set the PENDING_BYTE byte offset to 65536.
#
sqlite3_test_control_pending_byte 0x0010000

foreach writer $vfs_wrappers {
  foreach {dummy w} [split $writer .] {}

  # Create a database on a file-system with sector-size $w
  #
  forcedelete test.db
  zip_register $writer 0 zip
  sqlite3 db test.db -vfs zip
  do_test 1.$w.0 {
    execsql {
      BEGIN;
      CREATE TABLE t1(a, b);
      CREATE INDEX i1 ON t1(a, b);
    }
    for {set i 0} {$i < 128} {incr i} {
      execsql { INSERT INTO t1 VALUES(randomblob(1000), randomblob(1000)) }
    }
    execsql COMMIT
  } {}
  db close
  zip_unregister 

  # Make sure the database created above is larger than 65536 bytes (so does
  # include the PENDING_BYTE gap).
  #
  do_test 1.$w.1 {
    expr [file size test.db] > 65536
  } {1}

  # Write 0xFF bytes into the 64KB gap, to prove that it does not store 
  # any useful data.
  #
  do_test 1.$w.2 {
    hexio_write test.db 65536 [string repeat FF 65536]
  } 65536

  # Now check that the database can be read and integrity-checked on a 
  # variety of different file-systems with different sector sizes.
  #
  foreach reader $vfs_wrappers {
    foreach {dummy r} [split $reader .] {}
    zip_register $reader 0 zip
    sqlite3 db test.db -vfs zip
    do_test 1.$w.$r { 
      execsql { PRAGMA integrity_check } db 
    } {ok}
    db close
    zip_unregister
  }
}

catch { db close }
foreach wrapper $vfs_wrappers {
  $wrapper delete
}

#-------------------------------------------------------------------------
# The following tests verify that the page-size used to write a version 1
# zipvfs file is selected as follows:
#
#   1. If a page-size was specified as a URI parameter when opening the
#      file, use that value.
#
#   2. Otherwise, if the db is not empty, use the user db page-size.
#
#   3. Otherwise, use the default based on xSectorSize() and
#      SQLITE_DEFAULT_PAGE_SIZE.
#
# Zipvfs databases are always written using the rollback method. So we
# can determine the page size a transaction is written using by inspecting
# the header of the journal file.
#
# UPDATE: As of version 3.7.10, the pager sub-system does not base its
# default page-size on the sector-size as reported by the OS. Instead, it
# always uses 1024 bytes. Hence the block-size used for the very first
# transaction written to a zipvfs database always uses a block-size of 1K.
# 
# UPDATE 2: As of Zipvfs commit [ffb38c65bc1] the application page-size
# does not influence the zipvfs block-size either.
#
# So, at time of writing, the block-size used by zipvfs is always either
# 1024 bytes (if no block_size URI option is specified), or the value
# specified by any valid block_size parameter.
#
sqlite3_shutdown
sqlite3_config_uri 1
sqlite3_initialize

if {$SQLITE_DEFAULT_PAGE_SIZE==1024 && $SQLITE_MAX_DEFAULT_PAGE_SIZE==8192} {
  foreach {tn sectorsize pagesize uri blocksize1 blocksize2} {
    1       512  1024 file:test.db                        1024  1024
    2       512  2048 file:test.db                        1024  1024
    3      2048 65536 file:test.db                        1024  1024
    4     65536  2048 file:test.db                        1024  1024 
    5       512  2048 file:test.db?block_size=4096        4096  4096
    6       512  2048 file:test.db?block_size=4095        1024  1024
    7       512  2048 file:test.db?block_size=256         1024  1024
    8       512  2048 file:test.db?block_size=65536      65536 65536
    9       512  2048 file:test.db?block_size=512          512   512
    10      512  2048 file:test.db?block_size=131072      1024  1024
  } {
    forcedelete test.db
  
    # Set up a VFS that reports the file-system sector size to be $sectorsize
    #
    testvfs vfs
    vfs sectorsize $sectorsize
    zip_register vfs 0 zip
    sqlite3 db $uri -vfs zip
  
    # When the database file is synced, read the page-size field from the
    # journal file header. This tells us the page-size that was used to
    # write to the zipvfs file ("block-size" in the zipvfs vernacular).
    #
    proc xSync {method filename args} {
      if {[string match *test.db $filename]} {
        set ::blocksize [hexio_get_int [hexio_read test.db-journal 24 4]]
      }
    }
    vfs filter xSync
    vfs script xSync
  
    do_execsql_test 2.$tn.1 "PRAGMA page_size = $pagesize"
    do_execsql_test 2.$tn.2 {
      BEGIN;
        CREATE TABLE t1(a, b);
        INSERT INTO t1 VALUES(randomblob(1000), randomblob(1000));
      COMMIT;
    }
    do_test 2.$tn.3 { set ::blocksize } $blocksize1
  
    do_execsql_test 2.$tn.4 {
      BEGIN;
        INSERT INTO t1 VALUES(randomblob(1000), randomblob(1000));
      COMMIT;
    }
    do_test 2.$tn.5 { set ::blocksize } $blocksize2
    do_execsql_test 2.$tn.6 { PRAGMA zipvfs_block_size } $blocksize2
  
    db close
    zip_unregister
  }
}

#-------------------------------------------------------------------------
# This block of tests checks that version 0 databases are handled 
# correctly when encountered. If a version 0 database is smaller than
# PENDING_BYTE bytes, then it should be converted to a v1 database. Or,
# if it is larger than PENDING_BYTE bytes, then it should only be accessed
# using the pager selected page size.
#
# For this test, PENDING_BYTE is set to 65536 (see above).
#
if {$SQLITE_DEFAULT_PAGE_SIZE==1024 && $SQLITE_MAX_DEFAULT_PAGE_SIZE==8192} {
  foreach {tn sectorsize pagesize small_large uri blocksize} {
    1       512  2048 0 file:test.db                      1024
    2       512  2048 1 file:test.db                      2048
    3       512  2048 0 file:test.db?block_size=4096      1024
    4       512  2048 1 file:test.db?block_size=4096      4096
  } {
    forcedelete test.db
  
    testvfs vfs
    vfs sectorsize $sectorsize
    zip_register vfs 0 zip
  
    proc xSync {method filename args} {
      if {[string match *test.db $filename]} {
        set ::blocksize [hexio_get_int [hexio_read test.db-journal 24 4]]
      }
    }
    vfs filter xSync
    vfs script xSync

    sqlite3 db test.db -vfs zip
    # version-0 databases are no longer supported
    #zip_control db main create_version_0 1

    do_execsql_test 3.$tn.1 "PRAGMA page_size = $pagesize"
    do_execsql_test 3.$tn.2 {
      BEGIN;
        CREATE TABLE t1(a, b);
        INSERT INTO t1 VALUES(randomblob(1000), randomblob(1000));
      COMMIT;
    }
    set xtra ""
    if {$small_large} {
      append xtra "INSERT INTO t1 SELECT * FROM t1;"
      append xtra "INSERT INTO t1 SELECT * FROM t1;"
      append xtra "INSERT INTO t1 SELECT * FROM t1;"
      append xtra "INSERT INTO t1 SELECT * FROM t1;"
      append xtra "INSERT INTO t1 SELECT * FROM t1;"
      append xtra "INSERT INTO t1 SELECT * FROM t1;"
      append xtra "INSERT INTO t1 SELECT * FROM t1;"
    }
    do_execsql_test 3.$tn.3 "BEGIN; $xtra ; COMMIT;"

    db close
    sqlite3 db $uri -vfs zip

    do_execsql_test 3.$tn.4 {
      BEGIN;
        INSERT INTO t1 VALUES(randomblob(1000), randomblob(1000));
      COMMIT;
    }
    do_test 3.$tn.5 { set ::blocksize } $blocksize

    do_test 3.$tn.6 {
      hexio_get_int [hexio_read test.db 176 4]
    } 1

    # Try compacting the database. This is just to check that version 0
    # databases can be compacted without corrupting them.
    #
    do_test 3.$tn.7 { zip_control db main compact } {}
    do_test 3.$tn.8 { zip_control db main integrity_check } {}

    db close
    zip_unregister
  }
}

#--------------------------------------------------------------------------
# Check that the software refuses to open a db with version=3.
#

do_test 4.1 {
  forcedelete test.db
  noop_register {} 0
  sqlite3 db test.db -vfs noop
  execsql {
    CREATE TABLE t1(x PRIMARY KEY, y);
    INSERT INTO t1 VALUES(randomblob(400), zeroblob(500));
    SELECT length(x), length(y) FROM t1;
  }
} {400 500}

do_test 4.2 {
  db close
  hexio_write test.db 176 00000033
  sqlite3 db test.db -vfs noop
  catchsql {
    SELECT length(x), length(y) FROM t1;
  }
} {1 {unable to open database file}}

do_test 4.X {
  db close
  generic_unregister noop
} {}


finish_test
