
# This file contains simple test cases for zipvfs.
#

set testdir $env(SQLITE_TEST_DIR)
source $testdir/tester.tcl

set ::testprefix zipvfs_joff
db close
sqlite3_shutdown
sqlite3_config_uri 1

zip_register "" 1
sqlite3 db test.db

#-------------------------------------------------------------------------
# With the upper level pager configured with "journal_mode = off":
#
#   1.1: Test that ROLLBACK works.
#
#   1.2: Test that statement rollback is a no-op (the statement transaction 
#        is not rolled back).

do_execsql_test 1.0 {
  PRAGMA cache_size = 10;
  PRAGMA zipvfs_cache_size = 10;
  CREATE TABLE t1(a, b, PRIMARY KEY(a), UNIQUE(b));
  INSERT INTO t1 VALUES(randomblob(400), randomblob(400));
  INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM t1; --2
  INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM t1; --4
  INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM t1; --8
  INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM t1; --16
  INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM t1; --32
  INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM t1; --64
  INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM t1; --128
  INSERT INTO t1 SELECT randomblob(400), randomblob(400) FROM t1; --256
} {10}

do_execsql_test 1.1.1 {
  PRAGMA journal_mode = OFF;
  BEGIN;
    UPDATE t1 SET a = randomblob(399);
} {off}
do_execsql_test 1.1.2 {
  ROLLBACK;
  PRAGMA integrity_check;
} {ok}
do_execsql_test 1.1.3 {
  SELECT max(length(a)) from t1;
} {400}

proc str {n} { string repeat . $n }
db func str str
do_execsql_test 1.2.1 {
  BEGIN;
    UPDATE t1 SET a = str(400) || rowid;
}
do_catchsql_test 1.2.2 {
    UPDATE t1 SET b = str(400) || (rowid % 255);
} {1 {UNIQUE constraint failed: t1.b}}
do_catchsql_test 1.2.3 {
  COMMIT;
} {1 {query aborted}}
do_execsql_test 1.2.4 {
  PRAGMA integrity_check;
  SELECT max(length(b)) from t1;
} {ok 400}

do_execsql_test 1.3.1 {
  BEGIN;
    UPDATE t1 SET a = str(400) || rowid || 1;
}
do_catchsql_test 1.3.2 {
    UPDATE t1 SET b = str(400) || (rowid % 255);
} {1 {UNIQUE constraint failed: t1.b}}
do_catchsql_test 1.3.3 {
  ROLLBACK;
} {0 {}}
do_execsql_test 1.3.4 {
  PRAGMA integrity_check;
  SELECT max(length(b)) from t1;
} {ok 400}

#-------------------------------------------------------------------------
#
do_execsql_test 2.0 {
  CREATE TABLE x1(k INTEGER PRIMARY KEY, v);
  CREATE TABLE x2(k INTEGER PRIMARY KEY, v);
  CREATE INDEX x1v ON x1(v);
  CREATE INDEX x2v ON x2(v);

  WITH s(i) AS (VALUES(1) UNION ALL SELECT i+1 FROM s WHERE i<1000)
  INSERT INTO x1 SELECT i, randomblob(800) FROM s;

  WITH s(i) AS (VALUES(1) UNION ALL SELECT i+1 FROM s WHERE i<1000)
  INSERT INTO x2 SELECT i-800, randomblob(800) FROM s;
}

do_catchsql_test 2.1.1 {
  BEGIN;
    UPDATE x1 SET v = randomblob(800);
    INSERT INTO x1 SELECT * FROM x2;
} {1 {UNIQUE constraint failed: x1.k}}
do_execsql_test 2.1.2 {
  ROLLBACK;
  PRAGMA integrity_check;
} {ok}

do_catchsql_test 2.2.1 {
  DELETE FROM x1 WHERE rowid<1;
  INSERT INTO x1 SELECT * FROM x2;
} {1 {UNIQUE constraint failed: x1.k}}
do_execsql_test 2.2.2 {
  PRAGMA integrity_check;
} {ok}

do_catchsql_test 2.3.1 {
  BEGIN;
    UPDATE x1 SET v = randomblob(800);
    INSERT INTO x1 SELECT * FROM x2;
} {1 {UNIQUE constraint failed: x1.k}}
do_catchsql_test 2.3.2 {
  COMMIT
} {1 {query aborted}}
do_execsql_test 2.3.3 {
  PRAGMA integrity_check
} {ok}

db close
zip_unregister
finish_test

