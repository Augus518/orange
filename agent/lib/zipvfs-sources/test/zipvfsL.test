

# This file tests the outcome of using journal_mode=OFF during VACUUM
# with Zipvfs.
#

source [file join [file dirname [info script]] zipvfs_common.tcl]
source $testdir/malloc_common.tcl
set ::testprefix zipvfsL

db close
rle_register "" 0
sqlite3 db test.db -vfs rle

do_execsql_test 1.0 {
  CREATE TABLE t1(a, b);
  CREATE INDEX i1 ON t1(a, b);
  WITH s(x,y) AS (
    SELECT 1, randomblob(100)
    UNION ALL
    SELECT x+1, randomblob(100) FROM s WHERE x<100
  )
  INSERT INTO t1 SELECT * FROM s;
  PRAGMA integrity_check;
} {ok}

if {[uses_8_3_names]} {
  set wal "test.wal"
  set wal2 "test2.wal"
} else {
  set wal "test.db-wal"
  set wal2 "test2.db-wal"
}

do_test 1.1 {
  forcecopy test.db test2.db
  set fd [open $wal w]
  puts $fd "xyz" 
  close $fd
  execsql {
    UPDATE t1 SET b = randomblob(110);
    PRAGMA integrity_check;
  }
} {ok}

do_test 1.2 {
 set nByte [file size $wal]
 expr $nByte>36000 && $nByte<39000
} {1}

do_test 1.3 {
  forcecopy $wal $wal2
  breakpoint
  sqlite3 db2 test2.db -vfs rle
  db2 eval {
    PRAGMA integrity_check;
    SELECT sum(length(b)) FROM t1;
  } 
} {ok 11000}

db close
db2 close

#-------------------------------------------------------------------------
#
forcedelete test.db
sqlite3 db test.db -vfs rle

do_execsql_test 2.0 {
  PRAGMA auto_vacuum=FULL;
  CREATE TABLE t1(a INTEGER PRIMARY KEY, b);
  INSERT INTO t1 VALUES(4, zeroblob(3000));
  DELETE FROM t1 WHERE a=4;
} {}

do_test 2.1 {
  zip_control db main integrity_check
} {}

db close
rle_unregister
finish_test

