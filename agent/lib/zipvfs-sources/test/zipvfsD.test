

# This file contains tests that use the SQLite 'multiplexor' and 8.3 filename
# extensions with zipvfs. The VFS stack is:
#
#    SQLite -> zipvfs -> multiplexor -> "real" VFS
#

set testdir $env(SQLITE_TEST_DIR)
source $testdir/tester.tcl
set ::testprefix zipvfsD

ifcapable !8_3_names {
  puts -nonewline "SQLite compiled without SQLITE_ENABLE_8_3_NAMES. "
  puts "Skipping tests ${testprefix}-*."
  finish_test
  return
}

db close
sqlite3_shutdown
sqlite3_config_uri 1
autoinstall_test_functions

proc create_vfs_stack {} {
  sqlite3_multiplex_initialize "" 0
  zip_register multiplex 1 stack
}

proc destroy_vfs_stack {} {
  generic_unregister stack
  sqlite3_multiplex_shutdown
}

proc delete_multiplex_testdb {} {
  forcedelete test.db
  for {set i 1} {$i <= 1000} {incr i} {
    forcedelete test.[format %03d $i]
  }
}

do_test 0.0 { create_vfs_stack ; destroy_vfs_stack } {SQLITE_OK}
do_test 0.1 { create_vfs_stack } {}


#-------------------------------------------------------------------------
# Test cases 1.* test explicit rollback of a transaction.
#
foreach f [glob -nocomplain test.*] { forcedelete $f }
do_test 1.0 {
  delete_multiplex_testdb
  sqlite3 db file:test.db?8_3_names=1
  sqlite3_multiplex_control db main chunk_size [expr 1024*1024]
  execsql {
    CREATE TABLE t1(a PRIMARY KEY, b);
  }
} {}

do_test 1.1 {
  db transaction {
    for {set i 0} {$i < 1024} {incr i} {
      execsql { INSERT INTO t1 VALUES($i, randomblob(4096)) }
    }
  }
  lsort [glob test.*]
} {test.001 test.002 test.003 test.004 test.db}


# Note: The configured chunk-size (1MB) does not apply to the journal file.
# For this reason the whole journal is stored in file test.nal here.
#
do_test 1.2 {
  set cksum [execsql {SELECT md5sum(a, b) FROM t1 ORDER BY a}]
  execsql "PRAGMA journal_mode=delete;"
  execsql BEGIN
  execsql { UPDATE t1 SET b = randomblob(4000) }
  lsort [glob test.*]
} {test.001 test.002 test.003 test.004 test.db test.nal}

do_test 1.3 {
  set cksum2 [execsql {SELECT md5sum(a, b) FROM t1 ORDER BY a}]
  expr {$cksum == $cksum2}
} 0

do_test 1.4 {
  execsql { ROLLBACK }
  set cksum3 [execsql {SELECT md5sum(a, b) FROM t1 ORDER BY a}]
  expr {$cksum == $cksum3}
} 1

catch { db close }
destroy_vfs_stack
finish_test

