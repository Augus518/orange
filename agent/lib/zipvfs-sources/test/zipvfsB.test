#
# This file contains test cases for zipvfs. More specifically, it tests that
# Zipvfs VFS's created using zipvfs_create_v3() function as expected.
#

source [file join [file dirname [info script]] zipvfs_common.tcl]
set ::testprefix zipvfsB

catch { db close }
sqlite3_shutdown
sqlite3_config_uri 1

#
# zipvfsB-1.*: Test that creating a new file using a v3 VFS results in a
#              file that uses "zlib" compression. Test that the pw= option
#              is respected in this case.
#
# zipvfsB-2.*: Test that a v3 VFS can also recognize and open an RLE 
#              compressed Zipvfs file.
#
# zipvfsB-3.*: Test that a v3 VFS can open a vanilla SQLite file.
#
# zipvfsB-4.*: Test that an error is returned the first time a file that
#              uses an unknown encoding is used. Even if there is a VFS
#              registered that could read the db. The v3 VFS's do not search
#              for an existing VFS to "borrow" functions from. This is a
#              function of legacy VFS only. 
#
# zipvfsB-5.*: Check that the zAuxHdr value is correctly stored in the
#              file header.
#
# NOTE: The [v3_register] command sets up a generic VFS that can read 
# anything created by either the "zip" or "rle" compressions. It cannot
# read "noop" or "padded".
#

#-------------------------------------------------------------------------

do_test 0.1 { v3_register generic {} 0 } {}
do_test 0.2 { generic_unregister generic } {}

#-------------------------------------------------------------------------

do_test 1.1 {
  forcedelete test.db
  v3_register generic {} 0
  sqlite3 db test.db -vfs generic
  execsql {
    CREATE TABLE t1(x PRIMARY KEY, y);
    INSERT INTO t1 VALUES(randomblob(400), zeroblob(500));
    SELECT length(x), length(y) FROM t1;
  }
} {400 500}

do_test 1.2 {
  zip_register {} 0
  sqlite3 db2 test.db -vfs zip
  execsql { SELECT length(x), length(y) FROM t1 } db2
} {400 500}

do_test 1.3 {
  db2 close
  sqlite3 db2 test.db
  catchsql { SELECT length(x), length(y) FROM t1 } db2
} {1 {file is not a database}}

do_test 1.4 {
  db2 close
  sqlite3 db2 test.db -vfs generic
  execsql { SELECT length(x), length(y) FROM t1 } db2
} {400 500}

do_test 1.5 {
  db2 close
  db close
  forcedelete test.db
  sqlite3 db file:test.db?pw=arcanum -vfs generic
  execsql {
    CREATE TABLE t1(x PRIMARY KEY, y);
    INSERT INTO t1 VALUES(randomblob(400), zeroblob(500));
    SELECT length(x), length(y) FROM t1;
  }
} {400 500}

do_test 1.6 {
  sqlite3 db2 file:test.db?pw=arcanum -vfs zip
  execsql { SELECT length(x), length(y) FROM t1 } db2
} {400 500}

do_test 1.7 {
  db2 close
  sqlite3 db2 file:test.db -vfs zip
  catchsql { SELECT * FROM t1 } db2
} {1 {disk I/O error}}

do_test 1.X {
  db close
  db2 close
  generic_unregister generic
  generic_unregister zip
} {}

#-------------------------------------------------------------------------

do_test 2.1 {
  forcedelete test.db
  v3_register generic {} 0
  rle_register {} 0
  zip_register {} 0

  sqlite3 db test.db -vfs rle
  execsql {
    CREATE TABLE t1(x PRIMARY KEY, y);
    INSERT INTO t1 VALUES(randomblob(400), zeroblob(500));
    SELECT length(x), length(y) FROM t1;
  }
} {400 500}

do_test 2.2 {
  sqlite3 db2 test.db -vfs generic
  execsql { SELECT length(x), length(y) FROM t1 } db2
} {400 500}

do_test 2.3 {
  db2 close
  sqlite3 db2 test.db -vfs zip
  execsql { SELECT length(x), length(y) FROM t1 } db2
} {400 500}

do_test 2.4 {
  db2 close
  db close
  generic_unregister rle
  sqlite3 db2 test.db -vfs zip
  catchsql { SELECT length(x), length(y) FROM t1 } db2
} {1 {unable to open database file}}

do_test 2.X {
  db2 close
  generic_unregister generic
  generic_unregister zip
} {}

#-------------------------------------------------------------------------
#

set journalname test.db-journal
if {[uses_8_3_names]} { set journalname test.nal }

do_test 3.1 {
  forcedelete test.db
  v3_register generic {} 0
  sqlite3 db test.db
  execsql {
    CREATE TABLE t1(x PRIMARY KEY, y);
    INSERT INTO t1 VALUES(randomblob(400), zeroblob(500));
    SELECT length(x), length(y) FROM t1;
  }
} {400 500}

do_test 3.2 {
  sqlite3 db2 test.db -vfs generic
  execsql { SELECT length(x), length(y) FROM t1 } db2
} {400 500}

do_test 3.3 { file exists $journalname } {0}

do_test 3.4 {
  execsql {
    BEGIN;
      INSERT INTO t1 VALUES(randomblob(400), zeroblob(500));
  } db2
  file exists $journalname
} {1}

do_test 3.5 {
  execsql { COMMIT } db2
  file exists $journalname
} {0}

do_test 3.6 {
  execsql { SELECT length(x), length(y) FROM t1 } 
} {400 500 400 500}

do_test 3.X {
  db close
  db2 close
  generic_unregister generic
} {}

#-------------------------------------------------------------------------

do_test 4.1 {
  forcedelete test.db
  v3_register generic {} 0
  padded_register {} 0
  sqlite3 db test.db -vfs padded
  execsql {
    CREATE TABLE t1(x PRIMARY KEY, y);
    INSERT INTO t1 VALUES(randomblob(400), zeroblob(500));
    SELECT length(x), length(y) FROM t1;
  }
} {400 500}

do_test 4.2 {
  sqlite3 db2 test.db -vfs generic
  catchsql { SELECT length(x), length(y) FROM t1 } db2
} {1 {unknown operation}}

do_test 4.X {
  db close
  db2 close
  generic_unregister generic
  generic_unregister padded
} {}

#-------------------------------------------------------------------------
#
proc hex2ascii {hex} {
  set h $hex
  set res ""
  while {[string length $h]>=2} {
    set byte [string range $h 0 1]
    set h [string range $h 2 end]

    set b [format %c [expr 0x$byte]]
    if {[string is print $b] && ![string is space $b]} {
      append res $b
    } else {
      append res "%$byte"
    }
  }
  set res
}

do_test 5.1.1 {
  forcedelete test.db
  v3_register generic {} 0
  noop_register {} 0
  sqlite3 db test.db -vfs noop
  execsql {
    CREATE TABLE t1(x PRIMARY KEY, y);
    INSERT INTO t1 VALUES(randomblob(400), zeroblob(500));
    SELECT length(x), length(y) FROM t1;
  }
} {400 500}

do_test 5.1.2 {
  file_control_vfsname db main
} {/zipvfs.noop./}

do_test 5.2.1 {
  sqlite3 db2 test.db -vfs generic
  execsql {
    CREATE TABLE t2(zzz);
  } db2
  hex2ascii [hexio_read test.db 0 16]
} {ZV-noop%00auxheade}

do_test 5.2.2 {
  file_control_vfsname db2 main
} {/zipvfs.noop,auxheaderfornoop./}
db2 close

do_test 5.3 {
  hexio_write test.db 7 3200
  sqlite3 db2 test.db -vfs generic
  execsql {
    CREATE TABLE t3(zzz);
  } db2
  hex2ascii [hexio_read test.db 0 16]
} {ZV-compressedbyn}

do_test 5.3.2 {
  file_control_vfsname db2 main
} {/zipvfs.compressedbynoop,auxheaderfornoop/}
db2 close

do_test 5.4 {
  hexio_write test.db 3 7061737300
  sqlite3 db2 test.db -vfs generic
  catchsql { SELECT * FROM t1 } db2
} {1 {file is not a database}}
db2 close

do_test 5.X {
  db close
  generic_unregister generic
  generic_unregister noop
} {}

finish_test
