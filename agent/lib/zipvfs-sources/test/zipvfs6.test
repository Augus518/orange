
# Tests for the zip vfs. This file focuses on the ZIPVFS_CTRL_COMPACT
# file-control option. Except, tests for IO and OOM handling for compact
# operations are in zipvfs3.test (with the other fault handling tests).
#

source [file join [file dirname [info script]] zipvfs_common.tcl]
set ::testprefix zipvfs6
db close
forcedelete test.db

zip_register "" 1
sqlite3 db test.db

do_test 1.0 {
  execsql {
    PRAGMA page_size = 1024;
    CREATE TABLE t1(x, y, PRIMARY KEY(x, y));
    INSERT INTO t1 VALUES(randomblob(800), zeroblob(400));
    INSERT INTO t1 VALUES(randomblob(800), zeroblob(400));
  }
  for {set i 1} {$i <= 200} {incr i} {
    execsql { INSERT INTO t1 VALUES(randomblob(800-$i), zeroblob(400+$i)) }
  }
} {}
set size [file size test.db]
db_save_and_close

proc free_slots {db name} {
  array set A [zip_control $db $name stat]
  return $A(nFreeSlot)
}
proc free_bytes {db name} {
  array set A [zip_control $db $name stat]
  return $A(nFreeByte)
}
proc fragmented_bytes {db name} {
  array set A [zip_control $db $name stat]
  return $A(nFragByte)
}

db_restore_and_reopen
do_test 1.1 { expr {[free_slots db main]>10}   } 1
do_test 1.2 { expr {[free_bytes db main]>1000} } 1
do_test 1.3 { 
  zip_control db main compact
  expr {[file size test.db]<$size}
} 1
do_test 1.4 { expr {[free_slots db main]==0} } 1
do_test 1.5 { expr {[free_bytes db main]==0} } 1
do_test 1.6 { expr {[zip_control db main integrity_check]} } {}

db_restore_and_reopen
do_test 1.11 { expr {[free_slots db main]>10}   } 1
do_test 1.12 { expr {[free_bytes db main]>1000} } 1
do_test 1.13 { 
  db eval {PRAGMA zipvfs_compact}
  expr {[file size test.db]<$size}
} 1
do_test 1.14 { expr {[free_slots db main]==0} } 1
do_test 1.15 { expr {[free_bytes db main]==0} } 1
do_test 1.16 { expr {[zip_control db main integrity_check]} } {}


db_restore_and_reopen
do_test 2.1 { expr {[free_slots db main]>10}   } 1
do_test 2.2 { expr {[free_bytes db main]>1000} } 1
do_test 2.3 { 
  zip_control db main compact [expr $size/2]
  zip_control db main integrity_check
  expr {[file size test.db]==$size}
} 1
do_test 2.4 { expr {[free_slots db main]>10}   } 1
do_test 2.5 { expr {[free_bytes db main]>1000} } 1
do_test 2.6 { 
  zip_control db main compact [expr $size/2]
  zip_control db main integrity_check
  expr {[file size test.db]<$size}
} 1
do_test 2.7 { expr {[free_slots db main]==0} } 1
do_test 2.8 { expr {[free_bytes db main]==0} } 1

db_restore_and_reopen
do_test 2.11 { expr {[free_slots db main]>10}   } 1
do_test 2.12 { expr {[free_bytes db main]>1000} } 1
do_test 2.13a { 
  db eval "PRAGMA zipvfs_compact([expr $size/2])"
  db eval {PRAGMA integrity_check}
} {ok}
do_test 2.13b {
  expr {[file size test.db]==$size}
} 1
do_test 2.14 { expr {[free_slots db main]>10}   } 1
do_test 2.15 { expr {[free_bytes db main]>1000} } 1
do_test 2.16a { 
  db eval "PRAGMA zipvfs_compact([expr $size/2])"
  db eval {PRAGMA integrity_check}
} {ok}
do_test 2.16b {
  expr {[file size test.db]<$size}
} 1
do_test 2.17 { expr {[free_slots db main]==0} } 1
do_test 2.18 { expr {[free_bytes db main]==0} } 1

#-------------------------------------------------------------------------
# A special case - the gap area immediately follows the page-map. This
# means the code that makes room to extend the page map has to know how
# to allocate space from the gap area when required.
#
# The initial size of the page map is 256 bytes. Large enough to 
# hold 32 entries.
#
catch {db close}
forcedelete test.db
do_test 3.1 {
  sqlite3 db test.db
  execsql {
    PRAGMA page_size = 1024;
    PRAGMA auto_vacuum = 0;
    BEGIN;
      CREATE TABLE t1(x);
      INSERT INTO t1 VALUES(randomblob(30*1010));
    COMMIT;
    CREATE TABLE t2(x);
    PRAGMA page_count;
  }
} {32}
do_test 3.2 {
  zip_control db main detect_corruption 1
  zip_control db main compact 1
  execsql { CREATE TABLE t3(x) }
} {}

catch {db close}
forcedelete test.db
do_test 3.3 {
  sqlite3 db test.db
  execsql {
    PRAGMA page_size = 1024;
    PRAGMA auto_vacuum = 0;
    BEGIN;
      CREATE TABLE t1(xoiuwerhjafvklaslasfaggasgfasdfaslkdfjlasdfjieiigklajljvaadlfjadsklfjdkfjdkajfahgagewghrwerkwekjrhekwhjlasasdkfjhasjkdfhuiweehhvfhjvkvzkvkasdjfhajksdfhiweuheiasooaoaPPaasjkdfhklasfhdaoewrqoweyrqewrxqaisdufhyoasahfuaifhqoefhqoefrhqfiouhadiufhaofduaiofhqeofheiugfigaefusgiueghqoguehdqoidfhuqweouhqowhghftejhgthjggeruiuiyer34y508173810743qwertyuiopasdfghjklzxcvbnm);
      INSERT INTO t1 VALUES(randomblob(30*1010));
    COMMIT;
    CREATE TABLE t2(x);
    PRAGMA page_count;
  }
} {32}
do_test 3.4 {
  zip_control db main detect_corruption 1
  zip_control db main compact 1
  execsql { CREATE TABLE t3(x) }
} {}

#-------------------------------------------------------------------------
# Check that the ZIPVFS_CTRL_STRUCTURE file-control works on a database
# that contains a gap region.
#
db_restore_and_reopen

proc xStructure {pg off nbyte npadding desc} {
  if {$pg} { lappend ::pagelist $pg }
}
do_test 4.1 { 
  zip_control db main compact [expr $size/2]
  set ::pagelist [list]
  zip_control db main structure xStructure
} {}
do_test 4.2 { 
  unset -nocomplain pgarray
  set max 0
  foreach pg $::pagelist {
    if {[info exists pgarray($pg)]} { error "duplicate page number" }
    set pgarray($pg) 1
    if {$pg>$max} {set max $pg}
  }

  set pendingbyte [sqlite3_test_control_pending_byte 0]
  sqlite3_test_control_pending_byte $pendingbyte
  set pendingpg [expr {$pendingbyte / 1024 + 1}]
  for {set pg 1} {$pg <= $max} {incr pg} {
    if {$pg == $pendingpg} continue
    if {![info exists pgarray($pg)]} { error "Page $pg missing" }
  }

  list ok
} ok
do_test 4.3 { 
  zip_control db main compact
  zip_control db main structure xStructure
  zip_control db main integrity_check
} {}

#-------------------------------------------------------------------------
# Attempting to compact a database mid-transaction is an error.
#
db close
forcedelete test.db
sqlite3 db test.db -vfs zip
do_execsql_test 5.1 {
  CREATE TABLE t1(a, b);
  INSERT INTO t1 VALUES(1, 2);
  INSERT INTO t1 VALUES(3, 4);
  BEGIN;
    INSERT INTO t1 VALUES(5, 6);
}
do_test 5.2 {
  set rc [catch {zip_control db main compact} msg]
  list $rc $msg
} {1 {bad parameter or other API misuse}}
db close

#-------------------------------------------------------------------------
# Compacting a database that contains no free-slots, but does contain
# fragmented slots, works.
#
# Also one that contains no fragmented slots or free slots, but does
# contain a gap region.
#
do_test 6.1 {
  forcedelete test.db
  sqlite3 db test.db -vfs zip
  zip_control db main max_free 0
  execsql {
    PRAGMA secure_delete = 1;
    BEGIN;
      CREATE TABLE t1(a, b);
      INSERT INTO t1 VALUES(randomblob(200), randomblob(100));
    COMMIT;
    UPDATE t1 SET b = '';
  }
  free_slots db main
} {0}
do_test 6.2 { expr {[fragmented_bytes db main] > 0} } {1}
do_test 6.3 { zip_control db main compact } {}
do_test 6.4 { expr {[fragmented_bytes db main] > 0} } {0}
do_test 6.5 {
  catch { db close }
  forcedelete test.db
  sqlite3 db test.db -vfs zip
  execsql {
    PRAGMA secure_delete = 1;
    BEGIN;
      CREATE TABLE t1(x);
      CREATE TABLE t2(x);
      INSERT INTO t1 VALUES(randomblob(700));
      INSERT INTO t1 VALUES(randomblob(700));
      INSERT INTO t1 VALUES(randomblob(700));
      INSERT INTO t1 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
    COMMIT;
    BEGIN;
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
      INSERT INTO t2 VALUES(randomblob(700));
    COMMIT;
    UPDATE t1 SET x = randomblob(650);
  }
  zip_control db main compact [expr [file size test.db] / 2]
  set {} {}
} {}

set sz [file size test.db]
do_test 6.6 { expr {[free_slots db main] > 0} } {0}
do_test 6.7 { expr {[fragmented_bytes db main] > 0} } {0}
do_test 6.8 { 
  zip_control db main compact
  expr [file size test.db] < $sz
} {1}

#-------------------------------------------------------------------------
# Test encountering some specific types of corruption during a compact.
#
proc find_page {dbfile pgno iOffVar nByteVar} {
  set entryoff [expr {200 + ($pgno-1) * 8}]
  set entry [hexio_read $dbfile $entryoff 8]
  set offset [expr {
      ([hexio_get_int [string range $entry 0 1]] << 32)
    + ([hexio_get_int [string range $entry 2 9]])
  }]
  set size   [expr 1 + [hexio_get_int [string range $entry 10 13]]]
  uplevel [list set $iOffVar $offset]
  uplevel [list set $nByteVar $size]
}

do_test 7.1 {
  catch { db close }
  forcedelete test.db
  sqlite3 db test.db -vfs zip
  execsql {
    CREATE TABLE x1(x);
    INSERT INTO x1 VALUES('Liu Xiaobo');
    INSERT INTO x1 VALUES('Barack H. Obama');
    INSERT INTO x1 VALUES('Martti Ahtisaari');
    INSERT INTO x1 VALUES('Albert Arnold (Al) Gore Jr.');
    INSERT INTO x1 VALUES('Muhammad Yunus, Grameen Bank');
    INSERT INTO x1 VALUES('Mohamed ElBaradei');
  }
  db_save_and_close

  find_page test.db 2 off sz
  set newval [expr 1 + [hexio_get_int [hexio_read test.db $off 4]]]
  hexio_write test.db $off [hexio_render_int32 $newval]

  sqlite3 db test.db -vfs zip
  list [catch {zip_control db main compact} msg] $msg
} {1 {disk I/O error}}

# Set incorrect values for 3 header fields:
#
#   2: free-slot count
#   3: free-byte count
#
foreach {tn off} {
  2    152
  3    160
} {
  do_test 7.$tn {
    catch { db close }
    db_restore
    set newval [expr 1 + [hexio_get_int [hexio_read test.db $off 4]]]
    hexio_write test.db $off [hexio_render_int32 $newval]
    sqlite3 db test.db -vfs zip
    list [catch {zip_control db main compact} msg] $msg
  } {1 {disk I/O error}}
}

do_test 7.5 {
  catch { db close }
  forcedelete test.db
  sqlite3 db test.db -vfs zip
  execsql {
    BEGIN;
      CREATE TABLE x2(x);
      CREATE TABLE x1(x);
      INSERT INTO x1 VALUES(randomblob(800));
      INSERT INTO x1 VALUES(randomblob(800));
      INSERT INTO x1 VALUES(randomblob(800));
      INSERT INTO x1 VALUES(randomblob(800));
      INSERT INTO x1 VALUES(randomblob(800));
      INSERT INTO x1 VALUES(randomblob(800));
      INSERT INTO x1 VALUES(randomblob(800));
    COMMIT;
    INSERT INTO x2 VALUES('xxx');
  }

  # zip_control db main compact [expr [file size test.db] / 2]
  execsql VACUUM
  free_slots db main
} {0}

do_test 7.6 {
  db close
  hexio_write test.db 104 00000001
  sqlite3 db test.db -vfs zip
  list [catch {zip_control db main compact} msg] $msg
} {1 {disk I/O error}}

#-------------------------------------------------------------------------
# Test the ZIPVFS_CTRL_STAT file control.
#
catch { db close }
forcedelete test.db
zip_unregister
rle_register "" 0

do_test 8.1 {
  sqlite3 db test.db -vfs rle
  zip_control db main stat
} {nFreeSlot 0 nFileByte 0 nFreeByte 0 nFragByte 0 nGapByte 0 nContentByte 0}
do_contentsize_test 8.1.c

do_test 8.2 {
  execsql { 
    PRAGMA secure_delete = on;
    PRAGMA page_size = 1024;
    CREATE TABLE t1(x);
  }
  zip_control db main stat
} [list                                     \
  nFreeSlot 0 nFileByte 619 nFreeByte 0     \
  nFragByte 11 nGapByte 0 nContentByte 140  \
]
do_contentsize_test 8.2.c

do_test 8.3 {
  execsql { INSERT INTO t1 VALUES('xxx') }
  zip_control db main stat
} [list                                     \
  nFreeSlot 1 nFileByte 664 nFreeByte 37    \
  nFragByte 0 nGapByte 0 nContentByte 153   \
]
do_contentsize_test 8.3.c

do_test 8.4 {
  for {set i 0} {$i < 100} {incr i} {
    set str [string range [string repeat $i. 1000] 0 999]
    execsql { INSERT INTO t1 VALUES($str) }
  }
  zip_control db main stat
} [list                                         \
  nFreeSlot 23 nFileByte 112327 nFreeByte 7682  \
  nFragByte 0 nGapByte 0 nContentByte 102095    \
]
do_contentsize_test 8.4.c
do_execsql_test 8.5 { PRAGMA page_count } {115}

do_test 8.6 {
  zip_control db main compact 50000
  zip_control db main stat
} [list                                         \
  nFreeSlot 6 nFileByte 112327 nFreeByte 432    \
  nFragByte 0 nGapByte 7352 nContentByte 102095 \
]
do_contentsize_test 8.6.c

do_test 8.7 {
  zip_control db main compact 50000
  zip_control db main stat
} [list                                         \
  nFreeSlot 0 nFileByte 112327 nFreeByte 0      \
  nFragByte 0 nGapByte 7820 nContentByte 102095 \
]
do_contentsize_test 8.7.c

do_test 8.8 {
  zip_control db main compact 50000
  zip_control db main stat
} [list                                         \
  nFreeSlot 0 nFileByte 104507 nFreeByte 0      \
  nFragByte 0 nGapByte 0 nContentByte 102095    \
]
do_contentsize_test 8.8.c

#-------------------------------------------------------------------------
# Test that interrupting a compaction by modifying the database does not
# cause any problems.
catch { db close }
forcedelete test.db
sqlite3 db test.db -vfs rle
do_execsql_test 9.1 {
  PRAGMA secure_delete = on;
  CREATE TABLE t1(a, b UNIQUE, c UNIQUE);
  WITH s(i) AS (
    SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<200
  ) INSERT INTO t1 SELECT randomblob(200), randomblob(200), randomblob(200) FROM s;
} {1}

do_test 9.2 {
  set nByte [file size test.db]
  expr {$nByte > 200000 && $nByte < 350000}
} {1}

for {set i 1} {$i < 200} {incr i 2} {
  do_test 9.3.$i {
    execsql { DELETE FROM t1 WHERE rowid = $i   }
    execsql { PRAGMA zipvfs_compact = 100000 }
    execsql { DELETE FROM t1 WHERE rowid = ($i+1)   }
    execsql { PRAGMA zipvfs_compact}
    execsql { PRAGMA integrity_check}
  } {ok}
}

#--------------------------------------------------------------------------
# zipvfs_compact() bug found on 2016-03-10
#
catch {db close}
forcedelete test.db
sqlite3 db test.db -vfs rle
do_execsql_test 10.1 {
  PRAGMA page_size=1024;
  BEGIN;
  CREATE TABLE t1(a INTEGER PRIMARY KEY,b);
  WITH RECURSIVE c(x) AS (VALUES(1) UNION ALL SELECT x+1 FROM c WHERE x<635)
  INSERT INTO t1(a,b) SELECT 5, group_concat('xyz','') FROM c;
  CREATE TABLE t2(a INTEGER PRIMARY KEY,b);
  INSERT INTO t2(a,b) SELECT a, b FROM t1;
  CREATE TABLE t3(a INTEGER PRIMARY KEY,b);
  INSERT INTO t3(a,b) SELECT a, b FROM t1;
  COMMIT;
  BEGIN;
  DELETE FROM t1;
  DELETE FROM t2;
  DELETE FROM t3;
  COMMIT;
  PRAGMA zipvfs_compact(1);
  PRAGMA zipvfs_compact(1);
  PRAGMA zipvfs_compact(1);
  PRAGMA zipvfs_compact(1);
  PRAGMA zipvfs_compact(1);
  PRAGMA zipvfs_compact(1);
  PRAGMA zipvfs_compact(1);
  PRAGMA zipvfs_compact(1);
  PRAGMA zipvfs_compact(1);
  PRAGMA zipvfs_compact(1);
  PRAGMA zipvfs_compact(1);
  PRAGMA zipvfs_compact(1);
  PRAGMA integrity_check;
} {/.* 0 ok/}


catch { db close }
catch { zip_unregister }
catch { rle_unregister }
finish_test
