
# This file contains simple test cases for zipvfs. Specifically, for testing
# that the ZIPVFS_CTRL_REPLACE file-control works.
#

set testdir $env(SQLITE_TEST_DIR)
source $testdir/tester.tcl
source $testdir/lock_common.tcl
set ::testprefix zipvfs_repl

db close
sqlite3_shutdown

sqlite3_config_uri 1
autoinstall_test_functions

rle_register "" 1
forcedelete test.db2
sqlite3 dbFrom test.db2

do_execsql_test -db dbFrom 1.0 {
  CREATE TABLE t1(a, b, c);
  CREATE INDEX t1a ON t1(a);
  CREATE INDEX t1b ON t1(b);
  WITH s(i) AS (
    SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<200
  )
  INSERT INTO t1 SELECT randomblob(10), randomblob(20), randomblob(500) FROM s;
}
set md5 [dbFrom eval {SELECT md5sum(a, b, c) FROM t1}]

sqlite3 db test.db
do_test 1.1 {
  zip_control db main replace dbFrom
} {}
do_test 1.1.1 {
  execsql {
    SELECT md5sum(a, b, c) FROM t1;
    PRAGMA integrity_check;
  }
} [list $md5 ok]
do_execsql_test 1.2 { PRAGMA schema_version } 1

do_test 1.3 {
  zip_control db main replace dbFrom
  execsql {
    SELECT md5sum(a, b, c) FROM t1;
    PRAGMA integrity_check;
  }
} [list $md5 ok]
do_execsql_test 1.4 { PRAGMA schema_version } 2

#--------------------------------------------------------------------------
#
zip_register "" 0

db close
forcedelete test.db
sqlite3 db test.db -vfs zip
do_test 2.1 {
  list [catch { zip_control db main replace dbFrom } msg] $msg
} {1 {SQL logic error}}
db close
sqlite3 db test.db -vfs rle
do_execsql_test 2.2 {
  CREATE TABLE t1(a, b, c);
  INSERT INTO t1 VALUES(1, 2, 3);
  SELECT count(*) FROM t1;
} {1}
do_test 2.3 {
  zip_control db main replace dbFrom
  execsql { SELECT count(*) FROM t1 }
} {200}
db close
forcedelete test.db
sqlite3 db test.db -vfs rle
do_execsql_test 2.4 {
  PRAGMA page_size = 8192;
  CREATE TABLE t1(a, b, c);
  INSERT INTO t1 VALUES(1, 2, 3);
  SELECT count(*) FROM t1;
} {1}
do_test 2.5 {
  zip_control db main replace dbFrom
  execsql { SELECT count(*) FROM t1 }
} {200}

db close
forcedelete test.db
sqlite3 db test.db -vfs rle
do_execsql_test 2.4 {
  PRAGMA page_size = 8192;
  CREATE TABLE t1(a, b, c);
  INSERT INTO t1 VALUES(1, 2, 3);
  SELECT count(*) FROM t1;
} {1}
do_test 2.5 {
  zip_control dbFrom main replace db
  execsql { SELECT count(*) FROM t1 } dbFrom
} {1}
dbFrom close
db close
rle_unregister
zip_unregister

#-------------------------------------------------------------------------
# Test attempting to use this file-control with a non-ZipVFS db.
#
zip_register "" 0
forcedelete test.db
forcedelete test.db2
do_test 3.0 {
  sqlite3 db test.db
  sqlite3 db2 test.db2 -vfs zip
  execsql {
    CREATE TABLE t1(a, b);
    INSERT INTO t1 VALUES(1, 2);
  }
  execsql {
    CREATE TABLE t1(a, b);
    INSERT INTO t1 VALUES('a', 'b');
  } db2

  db close
  sqlite3 db test.db -vfs zip
  list [catch { zip_control db main replace db2 } msg] $msg
} {1 {unknown operation}}

do_test 3.1.1 {
  db close
  sqlite3 db test.db -vfs zip
  list [catch { zip_control db2 main replace db } msg] $msg
} {1 {unknown operation}}
do_test 3.1.2 {
  list [catch { zip_control db2 main replace db } msg] $msg
} {1 {unknown operation}}

do_test 3.2.1 {
  db close
  forcedelete test.db
  sqlite3 db test.db -vfs zip
  execsql {
    CREATE TABLE t1(a, b);
    INSERT INTO t1 VALUES(1, 2);
    BEGIN;
    SELECT * FROM t1;
  }
} {1 2}
do_test 3.2.2 {
  list [catch { zip_control db main replace db2 } msg] $msg
} {1 {bad parameter or other API misuse}}

do_test 3.3 {
  execsql COMMIT
  db close
  sqlite3 db "file:test.db?block_size=8192" -vfs zip
  list [catch { zip_control db main replace db2 } msg] $msg
} {1 {SQL logic error}}

#-------------------------------------------------------------------------
#
catch { db close }
catch { db2 close }
forcedelete test.db
forcedelete test.db2

sqlite3 db test.db2 -vfs zip
do_execsql_test 4.0 {
  CREATE TABLE x1(a PRIMARY KEY, b UNIQUE);
  INSERT INTO x1 VALUES(1, 1);
  INSERT INTO x1 VALUES(2, 2);
  INSERT INTO x1 VALUES(3, 3);
}
db close

sqlite3 db test.db -vfs zip
sqlite3 db2 test.db -vfs zip
sqlite3 dbFrom test.db2 -vfs zip

do_test 4.1 {
  execsql { PRAGMA zipvfs_journal_mode = wal }
  zip_control db main replace dbFrom
  execsql { SELECT * FROM x1 }
} {1 1 2 2 3 3}

do_test 4.2 {
  execsql { PRAGMA wal_checkpoint } db2
  zip_control db main replace dbFrom
  execsql { SELECT * FROM x1 }
} {1 1 2 2 3 3}
catch { db close }
catch { db2 close }
catch { dbFrom close }
zip_unregister

proc setup {db} {
  return "
    $db close
    zip_register {} 0
    sqlite3 $db test.db -vfs zip
  "
}

#-------------------------------------------------------------------------
#
do_multiclient_test tn {
  code1 [setup db]
  code2 [setup db2]
  code3 [setup db3]

  do_test 5.$tn.0 {
    sql1 { 
      PRAGMA zipvfs_journal_mode = wal;
      CREATE TABLE t1(a, b);
      INSERT INTO t1 VALUES(1, 2);
      INSERT INTO t1 VALUES(3, 4);
    }

    file exists test.db-wal
  } {1}

  do_test 5.$tn.1 {
    sql2 { PRAGMA wal_checkpoint }
  } {0}

  do_test 5.$tn.2 {
    code1 {
      sqlite3 dbFrom test.db2 -vfs zip
      dbFrom eval {
        CREATE TABLE x1(a PRIMARY KEY, b UNIQUE);
        INSERT INTO x1 VALUES(1, 1);
        INSERT INTO x1 VALUES(2, 2);
        INSERT INTO x1 VALUES(3, 3);
      }
      zip_control db main replace dbFrom
      dbFrom close
    }
    sql1 { SELECT * FROM x1 }
  } {1 1 2 2 3 3}

  do_test 5.$tn.3 {
    sql2 { PRAGMA wal_checkpoint }
  } {0}

  do_test 5.$tn.4 {
    code1 {
      sqlite3 dbFrom test.db2 -vfs zip
      zip_control db main replace dbFrom
      dbFrom close
    }
    sql1 { SELECT * FROM x1 }
  } {1 1 2 2 3 3}

  do_test 5.$tn.5 {
    code1 {
      sqlite3 dbFrom test.db2 -vfs zip
      sqlite3 db test.db -vfs zip
      zip_control db main replace dbFrom
      dbFrom close
    }
    sql1 { SELECT * FROM x1 }
  } {1 1 2 2 3 3}
}

#-------------------------------------------------------------------------
#

catch {db close}
forcedelete test.db
forcedelete test.db2

sqlite3 db test.db -vfs zip
sqlite3 db2 test.db2 -vfs zip
do_execsql_test 6.0.0 {
  CREATE TABLE x1(z);
  INSERT INTO x1 VALUES(1234);
}
do_execsql_test -db db2 6.0.1 {
  CREATE TABLE x1(z);
  INSERT INTO x1 VALUES('abcd');
}

do_test 6.1 {
  list [catch { zip_control db main replace_step 5 } msg] $msg
} {1 {bad parameter or other API misuse}}
do_test 6.2 {
  list [catch { zip_control db main replace_finish 0 } msg] $msg
} {1 {bad parameter or other API misuse}}

do_test 6.3 {
  zip_control db main replace_init db2
  while { [zip_control db main replace_step 1]=="" } {}
  zip_control db main replace_finish 0
  db eval {
    SELECT z FROM x1;
  }
} {1234}
do_test 6.4 {
  set res [list]
  zip_control db main replace_init db2
  lappend res [zip_control db main replace_ntotal]
  lappend res [zip_control db main replace_ndone]

  while { [zip_control db main replace_step 1]=="" } {
    lappend res [zip_control db main replace_ntotal]
    lappend res [zip_control db main replace_ndone]
  }
  zip_control db main replace_finish 1
  set res
} {1 0 1 1}
do_test 6.5 {
  db eval {
    SELECT z FROM x1;
  }
} {abcd}

#-------------------------------------------------------------------------
catch { db  close }
catch { db2 close }
sqlite3 db  test.db -vfs zip
sqlite3 db2 test.db2 -vfs zip

do_execsql_test 7.0 {
  CREATE TABLE t1(x, y);
  PRAGMA zipvfs_journal_mode = wal;
  INSERT INTO t1 VALUES(1, 2);
} {wal}
do_execsql_test -db db2 7.1 {
  CREATE TABLE t2(a, b);
  INSERT INTO t2 VALUES('x', 'y');
} {}
breakpoint
do_test 7.2 {
  zip_control db main replace db2
} {}
db close
db2 close
sqlite3 db test.db -vfs zip
do_execsql_test 7.3 {
  SELECT * FROM t2;
  PRAGMA zipvfs_journal_mode;
} {x y wal}

#-------------------------------------------------------------------------
catch { db2 close }
forcedelete test.db2
sqlite3 db2 test.db2 -vfs zip
do_execsql_test -db db2 8.0 {
  CREATE TABLE t1(a, b);
  INSERT INTO t1 VALUES('x', 'y');
}
for {set i 0} {$i < 10} {incr i} {
  catch { db  close }
  forcedelete test.db
  sqlite3 db  test.db -vfs zip
  sqlite3 db3 test.db -vfs zip

  do_test 8.1.$i {
    execsql { CREATE TABLE t1(a, b); }
    for {set x 0} {$x < $i} {incr x} {
      execsql { INSERT INTO t1 VALUES($x, $x) }
    }
    execsql { SELECT count(*) FROM t1 } db3
  } $i

  do_test 8.2.$i {
    zip_control db main replace db2
    execsql { SELECT * FROM t1 } db3
  } {x y}

}

#-------------------------------------------------------------------------
# Test with an encrypted db.
#
catch { db close }
catch { db2 close }
zipvfs_register 0

forcedelete test.db2 test.db
do_test 9.0 {
  sqlite3 db "file:test.db?vfs=zipvfs&zv=zlib&password=abc"
  execsql {
    CREATE TABLE t1(a, b, c);
    WITH s(i) AS ( SELECT 1 UNION ALL SELECT i+1 FROM s WHERE i<500 )
    INSERT INTO t1 SELECT i,i,i FROM s;
  }

  sqlite3 db2 "file:test.db2?vfs=zipvfs&zv=zlib&password=abc"
  execsql {
    CREATE TABLE t2(a, b, c);
    WITH s(i) AS ( SELECT 501 UNION ALL SELECT i+1 FROM s WHERE i<1000 )
    INSERT INTO t2 SELECT i,i,i FROM s;
  } db2
} {}

# Test the databases really are encrypted.
#
do_test 9.1 {
  db close
  sqlite3 db "file:test.db?vfs=zipvfs&password=123"
  catchsql { SELECT count(*) FROM t1 }
} {1 {disk I/O error}}
do_test 9.2 {
  db close
  sqlite3 db "file:test.db?vfs=zipvfs&password=abc"
  catchsql { SELECT count(*) FROM t1 }
} {0 500}

do_test 9.3 {
  zip_control db main replace db2
  execsql { SELECT count(*) FROM t2 }
} {500}

catch { db close }
catch { db2 close }
catch { db3 close }
zip_unregister
zipvfs_unregister

finish_test

