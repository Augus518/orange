
# Tests for the zipvfs module.
#

source [file join [file dirname [info script]] zipvfs_common.tcl]
source $testdir/lock_common.tcl
source $testdir/wal_common.tcl
set ::testprefix zipvfsG

db close
sqlite3_shutdown
sqlite3_config_uri 1
sqlite3_initialize
zip_register {} 0

if {[uses_8_3_names]} {
  set wal1 "test.wal"
  set wal2 "test2.wal"
} else {
  set wal1 "test.db-wal"
  set wal2 "test2.db-wal"
}

proc setup {db} {
  return [subst {
    $db close
    zip_register {} 0
    sqlite3 $db test.db -vfs zip
  }]
}

proc rnd_elem {list} {
  lindex $list [expr int(rand()*[llength $list])]
}

if 1 {

do_test 0.1 { 
  file size test.db
} 0
do_test 0.2 { 
  sqlite3 db test.db -vfs zip
  execsql { PRAGMA page_size }
} {1024}
do_test 0.3 { 
  db close
} {}


#-------------------------------------------------------------------------
# Test that WAL mode seems to work. And that, as expected, readers do not 
# block writers with WAL mode turned on.
#
do_multiclient_test tn {
  code1 [setup db]
  code2 [setup db2]
  code3 [setup db3]

  # Test that a read-transaction prevents writers with journal_mode=DELETE.
  #
  do_test 1.$tn.1.1 {
    sql1 "CREATE TABLE x1(a, b)"
    sql1 "INSERT INTO x1 VALUES(1, 2)"
    file exists $wal1
  } {0}
  do_test 1.$tn.1.2 { sql2 "BEGIN; SELECT * FROM x1;" } {1 2}
  do_test 1.$tn.1.3 { 
    csql1 "INSERT INTO x1 VALUES(3, 4)"
  } {1 {database is locked}}
  do_test 1.$tn.1.4 { sql2 "COMMIT" } {}
  do_test 1.$tn.1.5 { csql1 "INSERT INTO x1 VALUES(3, 4)" } {0 {}}

  # And that it does not with journal_mode=WAL.
  #
  do_test 1.$tn.2.1 { sql1 "PRAGMA zipvfs_journal_mode = WAL" } {wal}
  do_test 1.$tn.2.2 { sql2 "BEGIN; SELECT * FROM x1;" } {1 2 3 4}
  do_test 1.$tn.2.3 { csql1 "INSERT INTO x1 VALUES(5, 6)" } {0 {}}
  do_test 1.$tn.2.4 { sql2 "SELECT * FROM x1" } {1 2 3 4}
  do_test 1.$tn.2.5 { sql2 "COMMIT" } {}

  do_test 1.$tn.2.6 { sql1 "SELECT * FROM x1" } {1 2 3 4 5 6}
  do_test 1.$tn.2.7 { file exists $wal1 } {1}

  # Test changing back to a rollback mode.
  #
  do_test $tn.3.1 { 
    list [catch {sql1 "PRAGMA zipvfs_journal_mode = DELETE"} msg] $msg
  } {1 {database is locked}}
  do_test 1.$tn.3.2 { 
    code2 { db2 close }
    sql1 "PRAGMA zipvfs_journal_mode = DELETE"
  } {delete}
  do_test 1.$tn.3.3 { file exists $wal1 } {0}
  code2 { sqlite3 db2 test.db -vfs zip }
  do_test 1.$tn.3.4 { sql2 "SELECT * FROM x1" } {1 2 3 4 5 6}
  do_test 1.$tn.3.5 { csql1 "INSERT INTO x1 VALUES(7, 8)" } {0 {}}
  do_test 1.$tn.3.6 { sql2 "SELECT * FROM x1" } {1 2 3 4 5 6 7 8}
}



#-------------------------------------------------------------------------
# Check that a WAL file may be opened using any block-size.
#
#    2.1 - 2.3: When the WAL file does not already exist.
#    2.4 - 2.5: When the WAL file does exist and there are other clients.
#    2.6 - 2.7: When the WAL file exists but there are no other clients
#               (i.e. when recovery is required).
#
catch { db close }
forcedelete test.db
sqlite3 db test.db -vfs zip
do_execsql_test 2.1 {
  CREATE TABLE x1(a, b);
  CREATE INDEX i1 ON x1(a, b);
  PRAGMA zipvfs_journal_mode = WAL;
} {wal}

for {set i 0} {$i<200} {incr i} {
  db close

  # Arbitrarily select a block size.
  set blksz [rnd_elem {512 1024 2048 4096 8192 16384 32768 65536}]
  set tested_blksz($blksz) 1

  do_test 2.2.$i.1 {
    sqlite3 db file:test.db?block_size=$blksz -vfs zip
    execsql {
      PRAGMA integrity_check;
      SELECT count(*) FROM x1;
    }
  } [list ok $i]

  do_execsql_test 2.2.$i.2 {
    INSERT INTO x1 VALUES(randomblob(75), randomblob(400));
  }

  # Check that the WAL file exists and that it is using $blksz
  #
  do_test 2.2.$i.3 { file exists $wal1 } 1
  do_test 2.2.$i.4 { 
    hexio_get_int [hexio_read $wal1 8 4]
  } $blksz
}

# Assuming the [rnd_elem] proc is unbiased, the probability of one or more 
# of the following failing is (8 * (7/8)^200), or around 1 in 2^40.
#
foreach blksz {512 1024 2048 4096 8192 16384 32768 65536} {
  do_test 2.3.$blksz { set tested_blksz($blksz) } 1
}

do_execsql_test 2.4 { DELETE FROM x1 }
db close
for {set i 0} {$i<200} {incr i} {

  # Arbitrarily select two block sizes.
  set blksz1 [rnd_elem {512 1024 2048 4096 8192 16384 32768 65536}]
  set blksz2 [rnd_elem {512 1024 2048 4096 8192 16384 32768 65536}]

  sqlite3 db1 file:test.db?block_size=$blksz1 -vfs zip
  sqlite3 db2 file:test.db?block_size=$blksz2 -vfs zip

  do_test 2.5.$i.1 {
    execsql {
      PRAGMA integrity_check;
      SELECT count(*) FROM x1;
      INSERT INTO x1 VALUES(randomblob(75), randomblob(400));
    } db1
  } [list ok [expr 2*$i]]

  do_test 2.5.$i.2 {
    execsql {
      PRAGMA integrity_check;
      SELECT count(*) FROM x1;
      INSERT INTO x1 VALUES(randomblob(75), randomblob(400));
    } db2
  } [list ok [expr 2*$i+1]]

  # Check that the WAL file exists and that it is using $blksz1
  #
  do_test 2.5.$i.3 { file exists $wal1 } 1
  do_test 2.5.$i.4 { 
    hexio_get_int [hexio_read $wal1 8 4]
  } $blksz1

  db1 close
  db2 close
}

sqlite3 db test.db -vfs zip
do_execsql_test 2.6 { DELETE FROM x1 }
db close

for {set i 0} {$i<200} {incr i} {

  # Arbitrarily select two block sizes.
  set blksz1 [rnd_elem {512 1024 2048 4096 8192 16384 32768 65536}]
  set blksz2 [rnd_elem {512 1024 2048 4096 8192 16384 32768 65536}]

  sqlite3 db1 file:test.db?block_size=$blksz1 -vfs zip
  sqlite3 db2 file:test.db?block_size=$blksz2 -vfs zip

  do_test 2.7.$i.1 {
    execsql {
      PRAGMA integrity_check;
      SELECT count(*) FROM x1;
      INSERT INTO x1 VALUES(randomblob(75), randomblob(400));
    } db1
  } [list ok $i]

  forcedelete test2.db $wal2
  file copy test.db test2.db
  file copy $wal1 $wal2
  sqlite3 db2 file:test2.db?block_size=$blksz2 -vfs zip

  do_test 2.7.$i.2 {
    execsql {
      PRAGMA integrity_check;
      INSERT INTO x1 VALUES(randomblob(75), randomblob(400));
      SELECT count(*) FROM x1;
    } db2
  } [list ok [expr $i+2]]

  db1 close
  db2 close
}

#-------------------------------------------------------------------------
# Test that the wal_autocheckpoint and wal_checkpoint pragmas work as
# expected with zipvfs.
#
forcedelete test.db 
forcedelete $wal1

sqlite3 db test.db -vfs zip
do_execsql_test 3.1 {
  CREATE TABLE t1(a, b, PRIMARY KEY(a, b));
  PRAGMA zipvfs_journal_mode = WAL;
} {wal}
foreach ac {10 30 50 70 90 110} {
  do_test 3.2.$ac {
    execsql "PRAGMA wal_autocheckpoint = $ac"
    for {set i 0} {$i < 200} {incr i} {
      execsql { INSERT INTO t1 VALUES(randomblob(75), randomblob(400)) }
    }

    set min [wal_file_size $ac 1024]
    set max [wal_file_size [expr $ac+37] 1024]
    set sz [file size $wal1]
    puts -nonewline " ($min <= $sz <= $max) "
    expr {$sz >= $min && $sz <=$max}
  } 1
}

db close
sqlite3 db test.db -vfs zip
do_test 3.3 {

  for {set i 0} {$i < 50} {incr i} {
    execsql { INSERT INTO t1 VALUES(randomblob(75), randomblob(400)) }
  }
  set sz1 [file size $wal1]

  execsql { PRAGMA wal_checkpoint }

  for {set i 0} {$i < 25} {incr i} {
    execsql { INSERT INTO t1 VALUES(randomblob(75), randomblob(400)) }
  }
  set sz2 [file size $wal1]

  expr $sz1==$sz2
} 1

#-------------------------------------------------------------------------
# The following tests - zipvfsG-4.* - test that zipvfs pass-through mode
# can handle existing (non-zipvfs) WAL databases.
#
catch {db close}
forcedelete test.db 
forcedelete $wal1

sqlite3 db test.db
do_execsql_test 4.1 {
  CREATE TABLE x1(a, b);
  PRAGMA journal_mode = WAL;
  INSERT INTO x1 VALUES('abc', 'def');
} {wal}
db close
do_test 4.2 {
  sqlite3 db test.db -vfs zip
  execsql { 
    SELECT * FROM x1;
    INSERT INTO x1 VALUES('ghi', 'jkl');
  }
} {abc def}
do_test 4.3 { file exists $wal1 } 1
do_test 4.4 { 
  db close
  file exists $wal1 
} 0

do_test 4.5 {
  sqlite3 db test.db
  execsql { 
    INSERT INTO x1 VALUES('mno', 'pqr');
    INSERT INTO x1 VALUES('stu', 'vwx');
    SELECT * FROM x1;
  }
} {abc def ghi jkl mno pqr stu vwx}
do_test 4.6 { file exists $wal1 } 1
do_test 4.7 { 
  forcedelete test2.db $wal2
  file copy test.db test2.db
  file copy $wal1 $wal2

  sqlite3 db2 test2.db -vfs zip
  execsql { 
    SELECT * FROM x1;
    INSERT INTO x1 VALUES('y', 'z');
  } db2
} {abc def ghi jkl mno pqr stu vwx}

do_test 4.8 { 
  db close
  sqlite3 db test2.db
  file exists $wal1 
} 0

do_execsql_test 4.8 { 
  SELECT * FROM x1
} {abc def ghi jkl mno pqr stu vwx y z}

do_test 4.9 { 
  db close
  file exists $wal2 
} 1

do_test 4.10 { 
  db2 close
  file exists $wal2 
} 0

#-------------------------------------------------------------------------
# The following tests - zipvfsG-5.* - test that nothing goes horribly 
# wrong when there is more than one connection to a database and one of
# the connections switches to WAL mode. Try this with both zipvfs and
# pass-through mode databases.
#
foreach {nm connect_script} {
  passthrough {
    set ::pragmaname journal_mode
    sqlite3 db test.db
  }
  zipvfs {
    set ::pragmaname zipvfs_journal_mode
    sqlite3 db test.db -vfs zip
  }
} {
  forcedelete test.db $wal1

  eval $connect_script
  do_execsql_test 5.$nm.1 {
    CREATE TABLE t1(a PRIMARY KEY, b);
    INSERT INTO t1 VALUES(1, 2);
    INSERT INTO t1 VALUES(3, 4);
  }
  db close

  sqlite3 db1 test.db -vfs zip
  sqlite3 db2 test.db -vfs zip

  do_test 5.$nm.2 {execsql {SELECT * FROM t1} db1} {1 2 3 4}
  do_test 5.$nm.3 {execsql {SELECT * FROM t1} db2} {1 2 3 4}

  do_test 5.$nm.4 { 
    execsql { 
      BEGIN;
        SELECT * FROM t1 
    } db1
    catchsql "PRAGMA $::pragmaname = WAL" db2
  } {1 {database is locked}}

  do_test 5.$nm.5 { 
    execsql COMMIT db1
    catchsql "PRAGMA $::pragmaname = WAL" db2
  } {0 wal}

  do_test 5.$nm.6 { 
    execsql { INSERT INTO t1 VALUES(5, 6) } db1
    execsql { INSERT INTO t1 VALUES(7, 8) } db2
  } {}

  do_test 5.$nm.7 {execsql {SELECT * FROM t1} db1} {1 2 3 4 5 6 7 8}
  do_test 5.$nm.8 {execsql {SELECT * FROM t1} db2} {1 2 3 4 5 6 7 8}

  do_test 5.$nm.9 { 
    catchsql "PRAGMA $::pragmaname = DELETE" db2
  } {1 {database is locked}}
  do_test 5.$nm.10 { execsql { SELECT * FROM t1 } db1 } {1 2 3 4 5 6 7 8}

  do_test 5.$nm.11 { 
    db1 close
    catchsql "PRAGMA $::pragmaname = DELETE" db2
  } {0 delete}

  do_test 5.$nm.12 { 
    sqlite3 db1 test.db -vfs zip
    execsql { INSERT INTO t1 VALUES(9, 10) } db1
    execsql { INSERT INTO t1 VALUES(11, 12) } db2
  } {}

  do_test 5.$nm.13 {execsql {SELECT * FROM t1} db1} {1 2 3 4 5 6 7 8 9 10 11 12}
  do_test 5.$nm.14 {execsql {SELECT * FROM t1} db2} {1 2 3 4 5 6 7 8 9 10 11 12}

  db1 close
  db2 close
}

#-------------------------------------------------------------------------
# Check the outcome of executing a "PRAGMA zipvfs_journal_mode" or
# "PRAGMA journal_mode" statement immediately after opening a database.
#
foreach {nm connect_script} {
  passthrough {
    set ::pragmaname journal_mode
    sqlite3 db test.db
  }
  zipvfs {
    set ::pragmaname zipvfs_journal_mode
    sqlite3 db test.db -vfs zip
  }
} {

  forcedelete test.db $wal1
  eval $connect_script
  do_execsql_test 6.$nm.1 {
    CREATE TABLE t1(a PRIMARY KEY, b);
    INSERT INTO t1 VALUES(1, 2);
    INSERT INTO t1 VALUES(3, 4);
  } {}
  db close

  # Open the db and immediately switch to WAL mode.
  #
  sqlite3 db test.db -vfs zip
  do_test 6.$nm.2 { execsql "PRAGMA $::pragmaname = WAL" } {wal}
  do_test 6.$nm.3 { execsql "INSERT INTO t1 VALUES(5, 6)" } {}
  do_test 6.$nm.4 { file exists $::wal1 } 1
  db close
  
  # Open a db already in WAL mode and run journal_mode=WAL
  #
  sqlite3 db test.db -vfs zip
  do_test 6.$nm.5 { execsql "PRAGMA $::pragmaname = WAL" } {wal}
  do_test 6.$nm.6 { execsql "INSERT INTO t1 VALUES(7, 8)" } {}
  do_test 6.$nm.7 { file exists $::wal1 } 1
  db close
  
  # Open a db in WAL mode and run journal_mode=DELETE
  #
  sqlite3 db test.db -vfs zip
  do_test 6.$nm.8 { execsql "PRAGMA $::pragmaname = DELETE" } {delete}
  do_test 6.$nm.9 { execsql "INSERT INTO t1 VALUES(9, 10)" } {}
  do_test 6.$nm.10 { file exists $::wal1 } 0
  db close
  
  # Open a db in DELETE mode and run journal_mode=DELETE
  #
  sqlite3 db test.db -vfs zip
  do_test 6.$nm.11 { execsql "PRAGMA $::pragmaname = DELETE" } {delete}
  do_test 6.$nm.12 { execsql "INSERT INTO t1 VALUES(11, 12)" } {}
  do_test 6.$nm.13 { file exists $::wal1 } 0
  db close

  # Currently the db is in rollback mode. Test that trying to switch to WAL
  # mode using the "wrong" pragma (i.e. zipvfs_journal_mode in pass-through
  # mode, or journal_mode in zipvfs mode) is handled correctly.
  #
  sqlite3 db test.db -vfs zip
  if {$nm == "passthrough"} {
    do_test 6.$nm.15 { execsql "PRAGMA zipvfs_journal_mode = WAL" } {}
  } else {
    do_test 6.$nm.16 { 
      catchsql "PRAGMA journal_mode = WAL" 
    } {1 {journal_mode=WAL may not be used with zipvfs}}
  }
  do_test 6.$nm.17 { execsql "INSERT INTO t1 VALUES(13, 14)" } {}
  do_test 6.$nm.18 { file exists $::wal1 } 0
  db close

  # Switch the db to WAL mode.
  #
  sqlite3 db test.db -vfs zip
  do_test 6.$nm.19 { execsql "PRAGMA $::pragmaname = WAL" } {wal}
  db close

  # Check that attempting to use the wrong pragma to switch back to 
  # rollback mode is handled correctly.
  #
  sqlite3 db test.db -vfs zip
  if {$nm == "passthrough"} {
    do_test 6.$nm.20 { execsql "PRAGMA zipvfs_journal_mode = DELETE" } {}
  } else {
    do_test 6.$nm.21 { execsql "PRAGMA journal_mode = DELETE" } {delete}
  }
  do_test 6.$nm.22 { execsql "INSERT INTO t1 VALUES(15, 16)" } {}
  do_test 6.$nm.23 { file exists $::wal1 } 1
  db close

  # Check that the data inserted by all the other tests looks correct.
  #
  sqlite3 db test.db -vfs zip
  do_test 6.$nm.24 {
    execsql { SELECT * FROM t1 }
  } {1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16}
  db close
}


#-------------------------------------------------------------------------
# Test that "PRAGMA wal_autocheckpoint = 0" really does prevent automatic
# checkpoints from taking place.
#
}

catch { db close }
do_test 7.1.1 {
  forcedelete test.db
  sqlite3 db test.db -vfs zip
  execsql {
    PRAGMA zipvfs_journal_mode = wal;
    CREATE TABLE t1(x);
    PRAGMA wal_autocheckpoint = 0;
    INSERT INTO t1 VALUES(randomblob(1000));
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 2
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 4
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 8
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 16
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 32
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 64
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 128
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 256
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 512
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 1024
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 2048
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 4096
  }

  expr {[file size test.db-wal] > 1500 * 1024}
} {1}

do_execsql_test 7.1.2 { PRAGMA wal_autocheckpoint } {0}
do_execsql_test 7.1.3 { PRAGMA wal_autocheckpoint = 10 } {10}
do_execsql_test 7.1.4 { PRAGMA wal_autocheckpoint } {10}

do_execsql_test 7.1.5 { 
  PRAGMA wal_checkpoint = passive
} {0}

do_execsql_test 7.2.1 {
  PRAGMA zipvfs_journal_mode = delete;
  PRAGMA zipvfs_journal_mode = wal;
  BEGIN;
    INSERT INTO t1 VALUES(1);
} {delete wal}

do_catchsql_test 7.2.2 {
  PRAGMA zipvfs_journal_mode = delete;
} {1 {SQL logic error}}

do_execsql_test 7.2.3 {
  COMMIT;
  PRAGMA zipvfs_journal_mode = delete;
} {delete}

do_catchsql_test 7.2.4 {
  PRAGMA zipvfs_journal_mode = newmode;
} {0 delete}

do_execsql_test 7.2.5 {
  PRAGMA zipvfs_journal_mode
} {delete}

do_execsql_test 7.3.1 { PRAGMA locking_mode; } {normal}
do_execsql_test 7.3.2 { PRAGMA locking_mode = normal; } {normal}
do_catchsql_test 7.3.3 { 
  PRAGMA locking_mode = exclusive; 
} {1 {locking_mode=exclusive may not be used with zipvfs}}

do_execsql_test 7.4.1 { PRAGMA zipvfs_cache_size } {-400}
do_execsql_test 7.4.2 { PRAGMA zipvfs_cache_size = 1000 } {1000}
do_execsql_test 7.4.3 { PRAGMA zipvfs_cache_size } {1000}

#-------------------------------------------------------------------------
# Check that ROLLBACK works Ok for pass-through databases.
#
catch { db close }
do_test 8.1 {
  forcedelete test.db
  sqlite3 db test.db
  execsql {
    CREATE TABLE t1(x);
    INSERT INTO t1 VALUES(randomblob(1000));
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 2
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 4
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 8
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 16
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 32
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 64
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 128
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 256
    INSERT INTO t1 SELECT randomblob(1000) FROM t1; -- 512
  }
  db close
} {}
do_test 8.2 {
  sqlite3 db file:test.db?psow=0 -vfs zip
  execsql {
    PRAGMA cache_size = 10;
    BEGIN;
      UPDATE t1 SET x=randomblob(999);
      SELECT max(length(x)), min(length(x)) FROM t1;
    ROLLBACK;
    SELECT max(length(x)), min(length(x)) FROM t1;
  }
} {999 999 1000 1000}


db close
zip_unregister
finish_test
