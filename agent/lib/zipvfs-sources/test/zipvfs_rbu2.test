
#-------------------------------------------------------------------------
# This file contains test cases for zipvfs and the SQLite RBU extension.
# Specifically, test cases to verify that misconfigurations in the VFS
# stack are corrected and reported to the user.
#
# See the comments in sqlite3rbu.h for details. The trick is that the
# user has to organize things so that zipvfs uses an rbu VFS to access
# the database. e.g. this is ok:
#
#   zipvfs -> rbu -> unix
#
# but attempting an RBU update with this VFS stack is an error:
#
#   zipvfs -> unix
#
# even though using "unix" on its own works (as RBU automatically adds its VFS
# in that case).
#

set testdir $env(SQLITE_TEST_DIR)
source $testdir/tester.tcl
set ::testprefix zipvfs_rbu2

ifcapable !rbu {
  finish_test
  return
}

db close
sqlite3_shutdown
sqlite3_config_uri 1

zip_register "" 0

set db_sql {
  CREATE TABLE t1(a PRIMARY KEY, b, c);
}
set rbu_sql {
  CREATE TABLE data_t1(a, b, c, rbu_control);
  INSERT INTO data_t1 VALUES(1, 2, 3, 0);
  INSERT INTO data_t1 VALUES(4, 5, 6, 0);
  INSERT INTO data_t1 VALUES(7, 8, 9, 0);
}

# Test cases:
#
#   1.1.* - test that using zipvfs with no RBU vfs in the stack is an error.
#
#   1.2.* - test that attempting to update a zipvfs file without zipvfs is
#           an error.
#
#   1.3.* - test that using an RBU vfs as a wrapper around zipvfs is still
#           an error.
#
#   1.4.* - test that even if zipvfs is the default VFS, it still needs
#           the RBU vfs installed properly.
#
#   1.5.* - test that things actually do work if the RBU vfs is installed
#           properly.
#
do_test 1.0 {
  forcedelete test.db rbu.db
  sqlite3 db rbu.db
  db eval $rbu_sql

  sqlite3 db test.db -vfs zip
  db eval $db_sql
  db close
} {}

do_test 1.1.1 {
  sqlite3rbu rbu file:test.db?vfs=zip rbu.db
  rbu step
} {SQLITE_ERROR}
do_test 1.1.2 {
  list [catch { rbu close } msg] $msg
} {1 {SQLITE_ERROR - rbu vfs not found}}

do_test 1.2.1 {
  sqlite3rbu rbu test.db rbu.db
  rbu step
} {SQLITE_NOTADB}
do_test 1.2.2 {
  list [catch { rbu close } msg] $msg
} {1 {SQLITE_NOTADB - file is not a database}}

do_test 1.3.1 {
  sqlite3rbu_create_vfs ovfs zip
  sqlite3rbu rbu file:test.db?vfs=ovfs rbu.db
  rbu step
} {SQLITE_ERROR}
do_test 1.3.2 {
  list [catch { rbu close } msg] $msg
} {1 {SQLITE_ERROR - rbu/zipvfs setup error}}
sqlite3rbu_destroy_vfs ovfs

do_test 1.4.1 {
  zip_unregister
  zip_register "" 1
  sqlite3rbu rbu test.db rbu.db
  rbu step
} {SQLITE_ERROR}
do_test 1.4.2 {
  list [catch { rbu close } msg] $msg
} {1 {SQLITE_ERROR - rbu/zipvfs setup error}}

do_test 1.5.1 {
  zip_unregister
  sqlite3rbu_create_vfs ovfs ""
  zip_register ovfs 1
  sqlite3rbu rbu test.db rbu.db
  while {[rbu step] == "SQLITE_OK"} {}
  rbu close
} {SQLITE_DONE}
do_test 1.5.2 {
  sqlite3 db test.db
  execsql { SELECT * FROM t1 }
} {1 2 3 4 5 6 7 8 9}
db close
zip_unregister
sqlite3rbu_destroy_vfs ovfs

finish_test
