
# This file tests that a zipvfs file may be opened and written using one
# block-size, then successfully read using a different block-size.
#
# At one point this was failing. It was fixed by SQLite commit [629108c8e5].
#

set testdir $env(SQLITE_TEST_DIR)
source $testdir/tester.tcl
set ::testprefix zipvfsF
catch { db close }

sqlite3_shutdown
sqlite3_config_uri 1
sqlite3_initialize
autoinstall_test_functions

zip_register "" 0

do_test 1.0 {
  sqlite3 db file:test.db?block_size=1024 -vfs zip
  execsql {
    CREATE TABLE t1(a, b, UNIQUE(a, b));
    INSERT INTO t1 VALUES(randomblob(100), randomblob(101));
    INSERT INTO t1 SELECT randomblob(100), randomblob(101) FROM t1;
    INSERT INTO t1 SELECT randomblob(100), randomblob(101) FROM t1;
    INSERT INTO t1 SELECT randomblob(100), randomblob(101) FROM t1;
    INSERT INTO t1 SELECT randomblob(100), randomblob(101) FROM t1;
  }
  set nByte [file size test.db]
  expr {$nByte==13*1024 || $nByte==14*1024}
} {1}

set expect [db eval {SELECT md5sum(a) || md5sum(b) FROM t1}]

foreach {tn blksz} {
  1  1024
  2  2048
  3  4096
  4  8192
  5 16384
  6 32768
  7 65536
} {
  sqlite3 db file:test.db?block_size=$blksz -vfs zip
  do_test 1.$tn {
    execsql {
      BEGIN EXCLUSIVE;
        PRAGMA integrity_check;
        SELECT md5sum(a) || md5sum(b) FROM t1;
      COMMIT;
    }
  } [list ok $expect]
}


db close
zip_unregister
finish_test
